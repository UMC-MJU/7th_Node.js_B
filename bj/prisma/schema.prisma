// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}
model Member {
  id            Int @id @default(autoincrement())
  name          String? @db.VarChar(20)
  gender        String? @db.VarChar(10)
  age           Int?
  address       String? @db.VarChar(40)
  specAddress   String? @map("spec_address") @db.VarChar(40)
  phoneNum      String? @map("phone_num") @db.VarChar(13)
  status        String? @db.VarChar(15)
  inactiveDate  String?    @map("inactive_date") @db.VarChar(6)
  socialType    String? @map("social_type")  @db.VarChar(10)
  createdAt     DateTime?  @default(now()) @map("created_at") 
  updatedAt     DateTime?  @default(now()) @updatedAt @map("updated_at")    
  email         String?    @unique(map: "email") @db.VarChar(50)
  point         Int?   

  reviews Review[]
  memberPrefers MemberPrefer[]
  memberMissions MemberMission[]

  @@map("member")
}

model FoodCategory{
  id            Int     @id @default(autoincrement())
  name          String?  @db.VarChar(15)
  column4       String?  @db.VarChar(15)

  memberPrefers MemberPrefer[]

  @@map("food_category")
}

model MemberPrefer{
  id              Int           @id @default(autoincrement())
  member          Member?        @relation(fields: [memberId], references: [id])
  memberId        Int?           @map("member_id")
  foodCategory    FoodCategory?  @relation(fields: [foodCategoryId], references: [id])
  foodCategoryId  Int?           @map("category_id")

  @@index([foodCategoryId], map: "category_id")
  @@index([memberId], map: "member_id")
  @@map("member_prefer")
}

model Region{
  id            Int       @id @default(autoincrement())
  name          String?    @db.VarChar(20)
  createdAt     DateTime?  @default(now()) @map("created_at") 
  updatedAt     DateTime?  @default(now()) @updatedAt @map("updated_at")   

  stores Store[]

  @@map("region")
}

model Store{
  id              Int     @id @default(autoincrement())
  region          Region?  @relation(fields: [regionId], references: [id])
  regionId        Int?     @map("region_id")
  name            String?  @db.VarChar(50)
  address         String?  @db.VarChar(50)
  score           Float
  createdAt     DateTime?  @default(now()) @map("created_at") 
  updatedAt     DateTime?  @default(now()) @updatedAt @map("updated_at")  

  reviews Review[]
  missions Mission[]

  @@index([regionId], map: "region_id")
  @@map("store")
}

model Review{
  id              Int           @id @default(autoincrement())
  member          Member?       @relation(fields: [memberId], references: [id])
  memberId        Int?          @map("member_id")
  store           Store?        @relation(fields: [storeId], references: [id])
  storeId         Int?          @map("store_id")
  body            String?       @db.Text
  score           Float
  createdAt     DateTime?       @default(now()) @map("created_at") 

  @@index([memberId], map: "member_id")
  @@index([storeId], map: "store_id")
  @@map("review")
}

model Mission{
  id                Int         @id @default(autoincrement())
  store             Store?      @relation(fields: [storeId], references: [id])
  storeId           Int?        @map("store_id")
  reward            Int?
  deadline          DateTime?   @db.DateTime
  missionSpec       String?     @map("mission_spec") @db.Text
  createdAt         DateTime?   @default(now()) @map("created_at") 
  updatedAt         DateTime?   @default(now()) @updatedAt @map("updated_at")  

  memberMissions MemberMission[]

  @@index([storeId], map: "store_id")
  @@map("mission")
}

model MemberMission{
  id                Int       @id @default(autoincrement())
  member            Member?    @relation(fields: [memberId], references: [id])
  memberId          Int?       @map("member_id")
  mission           Mission?   @relation(fields: [missionId], references: [id])
  missionId         Int?       @map("mission_id")
  status            String?    @db.VarChar(15)
  createdAt     DateTime?  @default(now()) @map("created_at") 
  updatedAt     DateTime?  @default(now()) @updatedAt @map("updated_at") 

  @@index([memberId], map: "member_id")
  @@index([missionId], map: "mission_id")
  @@map("member_mission")
}